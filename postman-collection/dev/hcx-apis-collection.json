{
  "info": {
    "_postman_id": "a3da24e1-d5f8-48b2-9301-3a71cc9d204a",
    "name": "Newman HCX APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "17596548"
  },
  "item": [
    {
      "name": "Health APIs",
      "item": [
        {
          "name": "Health",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Health Check\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/health",
              "host": [
                "{{host}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Service Health",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Service Health Check\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{host}}/service/health",
              "host": [
                "{{host}}"
              ],
              "path": [
                "service",
                "health"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Token Generation",
      "item": [
        {
          "name": "keycloack token generation Provider",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Generate provider token\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "if(pm.response.code == 200){\r",
                  "    pm.environment.set(\"provider_token\",pm.response.json().access_token);\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "content-type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "registry-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "{{provider_username}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{provider_password}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_host}}/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token",
              "host": [
                "{{keycloak_host}}"
              ],
              "path": [
                "auth",
                "realms",
                "swasth-health-claim-exchange",
                "protocol",
                "openid-connect",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "keycloack token generation Provider Blocked",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Generate provider token\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "if(pm.response.code == 200){\r",
                  "    pm.environment.set(\"blocked_provider_token\",pm.response.json().access_token);\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "content-type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "registry-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "{{blocked_provider_username}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{blocked_provider_password}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_host}}/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token",
              "host": [
                "{{keycloak_host}}"
              ],
              "path": [
                "auth",
                "realms",
                "swasth-health-claim-exchange",
                "protocol",
                "openid-connect",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "keycloack token generation Payor",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Generate payor token\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "if(pm.response.code == 200){\r",
                  "    pm.environment.set(\"payor_token\",pm.response.json().access_token);\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "content-type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "registry-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "{{payor_username}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{payor_password}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_host}}/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token",
              "host": [
                "{{keycloak_host}}"
              ],
              "path": [
                "auth",
                "realms",
                "swasth-health-claim-exchange",
                "protocol",
                "openid-connect",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "keycloack token generation Payor 2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Generate payor token\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "if(pm.response.code == 200){\r",
                  "    pm.environment.set(\"payor_2_token\",pm.response.json().access_token);\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "content-type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "registry-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "{{payor_2_username}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{payor_2_password}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_host}}/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token",
              "host": [
                "{{keycloak_host}}"
              ],
              "path": [
                "auth",
                "realms",
                "swasth-health-claim-exchange",
                "protocol",
                "openid-connect",
                "token"
              ]
            }
          },
          "response": []
        },
        {
          "name": "keycloack token generation HIU",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Generate payor token\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "})\r",
                  "\r",
                  "if(pm.response.code == 200){\r",
                  "    pm.environment.set(\"hiu_token\",pm.response.json().access_token);\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "content-type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "registry-frontend",
                  "type": "text"
                },
                {
                  "key": "username",
                  "value": "{{hiu_username}}",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{hiu_password}}",
                  "type": "text"
                },
                {
                  "key": "grant_type",
                  "value": "password",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{keycloak_host}}/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token",
              "host": [
                "{{keycloak_host}}"
              ],
              "path": [
                "auth",
                "realms",
                "swasth-health-claim-exchange",
                "protocol",
                "openid-connect",
                "token"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Protocol APIs",
      "item": [
        {
          "name": "Coverage Eligibility, Status and Communication APIs",
          "item": [
            {
              "name": "Coverage Eligibility Check",
              "item": [
                {
                  "name": "Eligibility Check-Success",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility check success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.code == 202){\r",
                          "    var response = pm.response.json();\r",
                          "    pm.environment.set(\"check_req_api_call_id\",response.api_call_id);\r",
                          "    pm.environment.set(\"check_req_correlation_id\",response.correlation_id);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Success Subscription",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"hiu_participant_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"HIU participant coverage eligibility check - subscription success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.code == 202){\r",
                          "    var response = pm.response.json();\r",
                          "    pm.environment.set(\"hiu_check_req_correlation_id\",response.correlation_id);\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{hiu_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Authorization header missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"JWT Token Expiry\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(401);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_ACCESS_DENIED\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Authorization header is missing\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      },
                      {
                        "key": "Authorization",
                        "value": "\"Bearer  \"",
                        "type": "text",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Malformat JWT Token",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Malformat JWT Token\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(401);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_ACCESS_DENIED\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Malformed Authorization content\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "noauth"
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      },
                      {
                        "key": "Authorization",
                        "value": "\"Bearer  \"",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Wrong encoded protected",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Wrong encoded payload\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_PAYLOAD\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZT.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid Payload",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid payload\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_PAYLOAD\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\" \"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Mandatory headers missing",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Mandatory headers missing\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_MANDATORY_HEADERFIELD_MISSING\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Mandatory headers are missing\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtYXBpX2NhbGxfaWQiOiJhYTFlM2Y5Yi05MGE3LTRlZDktOTgyMS0wMzA2ZjFiY2I3NDYiLCJ4LWhjeC13b3JrZmxvd19pZCI6IjVlOTM0ZjkwLTExMWQtNGYwYi1iMDE2LWMyMmQ4MjA2NzRlMiJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid sender",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = 'test-123';\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid Sender\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SENDER\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"sender does not exist in the registry\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid recipient",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = 'test-123';\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid recipient\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_RECIPIENT\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"recipient does not exist in the registry\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Sender and JWT token mismatch",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Sender and JWT token mismatch\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_ACCESS_DENIED\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Caller id and sender code is not matched\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Sender blocked",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"blocked_sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Blocked Sender\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SENDER\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"blocked or inactive as per the registry\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Recipient blocked",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"blocked_recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Blocked Sender\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_RECIPIENT\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"blocked or inactive as per the registry\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid api call id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = '';\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid api call id\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_API_CALL_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Api call id cannot be null, empty and other than 'String'\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid correlation id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = '';\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid correlation id\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_CORRELATION_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Correlation id cannot be null, empty and other than 'String'\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid workflow id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid workflow id\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_WORKFLOW_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Workflow id cannot be null, empty and other than 'String'\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiIifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid timestamp",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "// decoded[\"x-hcx-timestamp\"] = moment().format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid timestamp\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_TIMESTAMP\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Timestamp should be a valid ISO-8061 format\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrIiwieC1oY3gtYXBpX2NhbGxfaWQiOiJhYTFlM2Y5Yi05MGE3LTRlZDktOTgyMS0wMzA2ZjFiY2I3NDYiLCJ4LWhjeC13b3JrZmxvd19pZCI6IjVlOTM0ZjkwLTExMWQtNGYwYi1iMDE2LWMyMmQ4MjA2NzRlMiJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Invalid status",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid status\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_STATUS\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXF1ZXN0LmNvbXBsZXRlIn0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "key": "token",
                    "value": "{{provider_token}}",
                    "type": "string"
                  }
                ]
              },
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ]
            },
            {
              "name": "Status APIs",
              "item": [
                {
                  "name": "Status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});\r",
                          "\r",
                          "if(pm.response.code == 202){\r",
                          "    var response = pm.response.json();\r",
                          "}"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/hcx/status",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "hcx",
                        "status"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "On status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"On status success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ]
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "type": "text/javascript",
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UucGFydGlhbCJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/hcx/on_status",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "hcx",
                        "on_status"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Communication APIs",
              "item": [
                {
                  "name": "Communication Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Communication request success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/communication/request",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "communication",
                        "request"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Communication On Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Communication on request success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UucGFydGlhbCJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/communication/on_request",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "communication",
                        "on_request"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Redirect Flow",
              "item": [
                {
                  "name": "Eligibility On Check-Redirect request success",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(function() {\r",
                          "}, 8000);\r",
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-redirect_to\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Redirect request success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.redirect\",\r\n    \"x-hcx-redirect_to\": \"1-74f6cb29-4116-42d0-9fbb-adb65e6a64ac\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Redirect missing headers",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Redirect missing headers\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_MANDATORY_HEADERFIELD_MISSING\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Mandatory headers are missing: [x-hcx-redirect_to]\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.complete\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Redirect_to code is empty",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-redirect_to\"] = '';\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Redirect to same sender\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_REDIRECT_TO\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Redirect requests must have valid participant code for field x-hcx-redirect_to\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.redirect\",\r\n    \"x-hcx-redirect_to\": \"1-74f6cb29-4116-42d0-9fbb-adb65e6a64ac\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Redirect invalid redirect_to code",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-redirect_to\"] = 'test-123';\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid redirect_to code\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_REDIRECT_TO\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Redirected does not exist in the registry\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.redirect\",\r\n    \"x-hcx-redirect_to\": \"1-74f6cb29-4116-42d0-9fbb-adb65e6a64ac\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Redirect to same sender",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-redirect_to\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Redirect to same sender\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_REDIRECT_TO\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Redirected participant do not have access to send across callbacks (on_* API calls)\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.redirect\",\r\n    \"x-hcx-redirect_to\": \"1-74f6cb29-4116-42d0-9fbb-adb65e6a64ac\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Redirect invalid status",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "//generating the payload\r",
                          "req[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "req[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "req[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "req[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "req[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid redirect request status\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_REDIRECT_TO\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Invalid redirect request\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"x-hcx-recipient_code\": \"1-3a3bd68a-848a-4d52-9ec2-07a92d765fb4\",\r\n    \"x-hcx-timestamp\": \"2021-10-27T20:35:52.636+0530\",\r\n    \"x-hcx-sender_code\": \"1-2ff1f493-c4d4-4fc7-8d41-aaabb997af23\",\r\n    \"x-hcx-correlation_id\": \"5e934f90-111d-4f0b-b016-c22d820674e1\",\r\n    \"x-hcx-api_call_id\": \"26b1060c-1e83-4600-9612-ea31e0ca5194\",\r\n    \"x-hcx-status\": \"response.complete\",\r\n    \"x-hcx-redirect_to\": \"1-74f6cb29-4116-42d0-9fbb-adb65e6a64ac\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Forward Flow",
              "item": [
                {
                  "name": "Eligibility Check-Payor 1 to Payor 2 - Invalid correlation id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility check forwarding from payor 1 to payor 2 invalid correlation id\", function () {\r",
                          "     var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_FORWARD_REQ\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"The request contains invalid correlation id\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Payor 1 to Payor 2 - Success",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(function() {\r",
                          "}, 9000);\r",
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility check forwarding from payor 1 to payor 2\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility Check-Payor 2 to Payor 1 - Invalid forwarding",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(function() {\r",
                          "  //added 3 seconds delay, so that audit data will be available for retrieval\r",
                          "}, 9000);\r",
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility check forwarding from payor 2 to payor 1\", function () {\r",
                          "     var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_FORWARD_REQ\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Request cannot be forwarded to the forward initiators\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_2_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Payor 2 to Provider - Invalid direct response",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility on check, invalid direct response from payor 2 to provider\", function () {\r",
                          "     var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_CORRELATION_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Invalid on_action request, corresponding action request does not exist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_2_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UucGFydGlhbCJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Payor 2 to Payor 1 - success",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(function() {\r",
                          "  //added 3 seconds delay, so that on_check request audit data will be available for retrieval\r",
                          "}, 9000);\r",
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_2_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility on check from payor 2 to payor 1\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_2_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UucGFydGlhbCJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Coverage Eligibility On Check",
              "item": [
                {
                  "name": "Eligibility On Check-Success",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility on check success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Success Subscription",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"hiu_check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"hiu_participant_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Coverage eligibility on check success\", function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Status out of range",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Status out of range\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_STATUS\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Status value for on_* API calls can be only\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXF1ZXN0LnF1ZXVlZCJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Debug flag out of range",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Debug flag out of range\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_DEBUG_FLAG\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Debug flag cannot be other than Error, Info or Debug\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1kZWJ1Z19mbGFnIjoidGVzdCIKfQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Debug details out of range",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Debug details out of range\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_DEBUG_DETAILS\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Debug details should contain only\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1kZWJ1Z19kZXRhaWxzIjp7CiJjb2RlIjoiRVJSX0lOVkFMSURfUEFZTE9BRCIsCiJtZXNzYWdlIjoiaW52YWxpZCByZXF1ZXN0IHBheWxvYWQiLAoidHJhY2UiOiIiLAoidGVzdCI6IiJ9fQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Error details out of range",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Error details out of range\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_ERROR_DETAILS\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Error details should contain only\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1lcnJvcl9kZXRhaWxzIjp7CiJjb2RlIjoiRVJSX0lOVkFMSURfUEFZTE9BRCIsCiJtZXNzYWdlIjoiaW52YWxpZCByZXF1ZXN0IHBheWxvYWQiLAoidHJhY2UiOiIiLAoidGVzdCI6IiJ9fQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Request exist with same api call id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = pm.environment.get(\"check_req_api_call_id\");\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Request exist with same api call id\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_API_CALL_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Request exist with same api call id\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Invalid correlation id",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Invalid correlation id\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_CORRELATION_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Invalid on_action request, corresponding action request does not exist\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSJ9.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Eligibility On Check-Correlation id is closed",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "setTimeout(function() {\r",
                          "  //added 3 seconds delay, so that on_check request audit data will be available for retrieval\r",
                          "}, 15000);\r",
                          "var uuid = require('uuid');\r",
                          "var moment = require('moment');\r",
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "var payload = req.payload.split(\".\");\r",
                          "var headers = payload[0];\r",
                          "var decoded = JSON.parse(atob(headers));\r",
                          "//generating the payload\r",
                          "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"check_req_correlation_id\");\r",
                          "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                          "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                          "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                          "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                          "encoded = btoa(JSON.stringify(decoded));\r",
                          "payload[0] = encoded;\r",
                          "encoded_string = payload.join(\".\");\r",
                          "\r",
                          "req.payload = encoded_string;\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Correlation id is closed\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_CORRELATION_ID\");\r",
                          "    pm.expect(response.error[\"message\"]).to.include(\"Invalid request, cycle is closed for correlation id\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "x-mock-match-request-body",
                        "value": "true",
                        "type": "default",
                        "disabled": true
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/coverageeligibility/on_check",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "coverageeligibility",
                        "on_check"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        },
        {
          "name": "Predetermination APIs",
          "item": [
            {
              "name": "Predetermination submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Predetermination submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});\r",
                      "\r",
                      "if(pm.response.code == 202){\r",
                      "    var response = pm.response.json();\r",
                      "    pm.environment.set(\"predetermination_submit_req_correlation_id\",response.correlation_id);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/predetermination/submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "predetermination",
                    "submit"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Predetermination On submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function() {\r",
                      "  //added delay, so that action request audit data will be available for retrieval\r",
                      "}, 7000);\r",
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"predetermination_submit_req_correlation_id\");\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Predetermination on submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{payor_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/predetermination/on_submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "predetermination",
                    "on_submit"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "PreAuth APIs",
          "item": [
            {
              "name": "PreAuth submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"PreAuth submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});\r",
                      "\r",
                      "if(pm.response.code == 202){\r",
                      "    var response = pm.response.json();\r",
                      "    pm.environment.set(\"preauth_submit_req_correlation_id\",response.correlation_id);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/preauth/submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "preauth",
                    "submit"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "PreAuth On Submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function() {\r",
                      "  //added delay, so that action request audit data will be available for retrieval\r",
                      "}, 9000);\r",
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"preauth_submit_req_correlation_id\");\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"PreAuth on submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{payor_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/preauth/on_submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "preauth",
                    "on_submit"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Claim APIs",
          "item": [
            {
              "name": "Claim submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Claim submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});\r",
                      "\r",
                      "if(pm.response.code == 202){\r",
                      "    var response = pm.response.json();\r",
                      "    pm.environment.set(\"claim_submit_req_correlation_id\",response.correlation_id);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/claim/submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "claim",
                    "submit"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Claim On Submit-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function() {\r",
                      "  //added delay, so that action request audit data will be available for retrieval\r",
                      "}, 7000);\r",
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"claim_submit_req_correlation_id\");\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Claim on submit success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{payor_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/claim/on_submit",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "claim",
                    "on_submit"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Payment APIs",
          "item": [
            {
              "name": "Payment Request-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Payment request success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});\r",
                      "\r",
                      "if(pm.response.code == 202){\r",
                      "    var response = pm.response.json();\r",
                      "    pm.environment.set(\"payment_req_correlation_id\",response.correlation_id);\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{payor_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2In0=.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/paymentnotice/request",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "paymentnotice",
                    "request"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Payment On Request-Success",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "setTimeout(function() {\r",
                      "  //added delay, so that action request audit data will be available for retrieval\r",
                      "}, 9000);\r",
                      "var uuid = require('uuid');\r",
                      "var moment = require('moment');\r",
                      "var req = JSON.parse(pm.request.body.raw);\r",
                      "var payload = req.payload.split(\".\");\r",
                      "var headers = payload[0];\r",
                      "var decoded = JSON.parse(atob(headers));\r",
                      "//generating the payload\r",
                      "decoded[\"x-hcx-correlation_id\"] = pm.environment.get(\"payment_req_correlation_id\");\r",
                      "decoded[\"x-hcx-api_call_id\"] = uuid.v4();\r",
                      "decoded[\"x-hcx-sender_code\"] = pm.environment.get(\"sender_code\");\r",
                      "decoded[\"x-hcx-recipient_code\"] = pm.environment.get(\"recipient_code\");\r",
                      "decoded[\"x-hcx-timestamp\"] = moment().subtract(1, 'minutes').format(\"YYYY-MM-DDTHH:mm:ss.SSSZZ\");\r",
                      "encoded = btoa(JSON.stringify(decoded));\r",
                      "payload[0] = encoded;\r",
                      "encoded_string = payload.join(\".\");\r",
                      "\r",
                      "req.payload = encoded_string;\r",
                      "pm.request.body.raw = req;\r",
                      "console.log(\"modified request \", pm.request.body.raw);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"payment on request success\", function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "default"
                  },
                  {
                    "key": "x-mock-match-request-body",
                    "value": "true",
                    "type": "default",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"payload\":\"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtc3RhdHVzIjoicmVzcG9uc2UuY29tcGxldGUifQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/paymentnotice/on_request",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "paymentnotice",
                    "on_request"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Notification APIs",
          "item": [
            {
              "name": "Topic List API",
              "item": [
                {
                  "name": "Topic List API - Empty filters",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Topic List with empty filters\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "    pm.expect(response.timestamp).exist;",
                          "    pm.expect(response.count).exist;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"filters\":{\r\n       \r\n   }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/topic/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "topic",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Topic List API - Category filter",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Topic List with category filters\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"filters\": {\r\n        \"category\": \"Network\"\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/topic/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "topic",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Topic List API - Category & priority filter Copy",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Topic List with category and priority filters\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"filters\":{\r\n        \"category\": \"Participant\",\r\n        \"priority\": 1\r\n    }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/topic/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "topic",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Topic List API - Invalid filters",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Topic List with invalid filters\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n   \"filters\":{\r\n       \"type\":\"Broadcast\"\r\n   }\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/topic/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "topic",
                        "list"
                      ]
                    }
                  },
                  "response": [
                    {
                      "name": "Topic List API - Invalid filters",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\r\n   \"filters\":{\r\n       \"type\":\"Broadcast\"\r\n   }\r\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        },
                        "url": {
                          "raw": "{{host}}/{{api-version}}/notification/topic/list",
                          "host": [
                            "{{host}}"
                          ],
                          "path": [
                            "{{api-version}}",
                            "notification",
                            "topic",
                            "list"
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "transfer-encoding",
                          "value": "chunked"
                        },
                        {
                          "key": "X-RateLimit-Remaining",
                          "value": "-1"
                        },
                        {
                          "key": "X-RateLimit-Requested-Tokens",
                          "value": "1"
                        },
                        {
                          "key": "X-RateLimit-Burst-Capacity",
                          "value": "20"
                        },
                        {
                          "key": "X-RateLimit-Replenish-Rate",
                          "value": "10"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        },
                        {
                          "key": "Date",
                          "value": "Mon, 11 Jul 2022 17:17:26 GMT"
                        }
                      ],
                      "cookie": [],
                      "body": "{\n    \"timestamp\": 1657559846818,\n    \"error\": {\n        \"code\": \"ERR_INVALID_NOTIFICATION_REQ\",\n        \"message\": \"Invalid notifications filters, allowed properties are: [category, priority]\",\n        \"trace\": null\n    }\n}"
                    }
                  ]
                }
              ]
            },
            {
              "name": "Subscribe API",
              "item": [
                {
                  "name": "Subscribe Success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscribe success\", function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "",
                          "if(pm.response.code == 202){",
                          "    var response = pm.response.json();",
                          "    pm.environment.set(\"provider_subscription_id\", response.subscription_list['0']);",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-participant-system-downtime\",\n  \"sender_list\": [\n    \"{{recipient_code}}\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Blocked Participant Subscribe",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Blocked Provider Subscribe\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SENDER\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{blocked_provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-participant-system-downtime\",\n  \"sender_list\": [\n    \"{{recipient_code}}\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe Empty Topic Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider Subscribe Empty Topic\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_TOPIC_CODE\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"\",\n  \"sender_list\": [\n    \"testpayor1.icici@swasth-hcx-dev\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe No Topic Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider Subscribe No Topic\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"sender_list\": [\n    \"testpayor1.icici@swasth-hcx-dev\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe No Sender List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider Subscribe No Sender List\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"de0e578d-b391-42f9-96f7-1e6bacd91c20\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe Invalid Sender",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payor Subscribe Invalid Sender\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-product-change-support\",\n  \"sender_list\": [\n    \"test-invalid-participant\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe Invalid Sender Role",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider Subscribe Invalid Sender Role\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-product-change-support\",\n  \"sender_list\": [\n    \"{{sender_code}}\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscribe Invalid Recipient Role",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Payor Subscribe Invalid Role\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-product-change-support\",\n  \"sender_list\": [\n    \"{{sender_code}}\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscribe"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "On Subscribe API",
              "item": [
                {
                  "name": "On Subscribe Success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"On Subscribe success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(202);",
                          "    pm.expect(response.timestamp).exist;",
                          "    pm.expect(response.subscription_id).exist;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"subscription_id\": \"{{provider_subscription_id}}\",\n  \"subscription_status\": \"Active\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/on_subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "on_subscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "On Subscribe Bad Request",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"On Subscribe bad request\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SUBSCRIPTION_ID\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"subscription_id\": \"c44bccb0-308a-46f4-9f7c-b06a9380e538\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/on_subscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "on_subscribe"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Unsubscribe API",
              "item": [
                {
                  "name": "UnSubscribe Success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider UnSubscribe success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(202);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{ \n  \"topic_code\": \"notif-participant-system-downtime\",\n  \"sender_list\": [\n    \"{{recipient_code}}\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UnSubscribe Blocked Participant",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Blocked Participant UnSubscribe\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SENDER\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{blocked_provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-participant-system-downtime\",\n  \"sender_list\": [\n    \"testpayor1.icici@swasth-hcx-dev\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UnSubscribe No Topic Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"UnSubscribe no topic code\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"sender_list\": [\n    \"testpayor1.icici@swasth-hcx-dev\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UnSubscribe Empty Topic Code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"UnSubscribe with empty topic code\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_TOPIC_CODE\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"\",\n  \"sender_list\": [\n    \"testpayor1.icici@swasth-hcx-dev\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UnSubscribe No Sender List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"UnSubscribe no sender list\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"de0e578d-b391-42f9-96f7-1e6bacd91c20\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "UnSubscribe Invalid Sender",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"UnSubscribe Invalid sender\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"topic_code\": \"notif-participant-system-downtime\",\n  \"sender_list\": [\n    \"test-invalid-participant\"\n  ]\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/unsubscribe",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "unsubscribe"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Subscription Update API",
              "item": [
                {
                  "name": "Invalid - mandatory properties missing",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update mandatory properties missing\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"testprovider1.apollo@swasth-hcx-dev\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid - subscription status",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update invalid subscription status\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"testprovider1.apollo@swasth-hcx-dev\",\r\n  \"subscription_status\": \"Delete\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid - expiry",
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"testprovider1.apollo@swasth-hcx-dev\",\r\n  \"expiry\": 1658822062215\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid - is delegated",
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"testprovider1.apollo@swasth-hcx-dev\",\r\n  \"is_delegated\": \"test\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Invalid subscription",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update invalid subscription\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"testprovider4.apollo@swasth-hcx-dev\",\r\n  \"is_delegated\": true\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "success - is delegated update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update is delegated success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"{{sender_code}}\",\r\n  \"is_delegated\": false\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "success - expiry update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update expiry update success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "var req = JSON.parse(pm.request.body.raw);\r",
                          "\r",
                          "var now = new Date();\r",
                          "// Add two weeks\r",
                          "now.setDate(now.getDate() + 14);\r",
                          "req[\"expiry\"] = now.getTime();\r",
                          "\r",
                          "pm.request.body.raw = req;\r",
                          "console.log(\"modified request \", pm.request.body.raw);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"{{sender_code}}\",\r\n  \"expiry\": 1659822720551\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "success - subscription status update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription Update subscription status\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"topic_code\": \"notif-participant-system-downtime\",\r\n  \"recipient_code\": \"{{sender_code}}\",\r\n  \"subscription_status\": \"Active\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/update",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "update"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Subscription List API",
              "item": [
                {
                  "name": "Subscription List",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Provider Subscription List success\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"filters\": {\n        \n    },\n    \"limit\": 10,\n    \"offset\": 0\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscription List Limt",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription List Limit success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"filters\": {},\n  \"limit\": 5,\n  \"offset\": 0\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscription List Valid Filters",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription List Valid Filters success\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(200);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"filters\": {\n    \"topic_code\": \"notif-product-change-support\"\n  },\n  \"limit\": 10,\n  \"offset\": 0\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscription List Valid Status Filter",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription List Valid Status Filters success\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(200);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"filters\": {\n    \"subscription_status\": \"Inactive\"\n  },\n  \"limit\": 10,\n  \"offset\": 0\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "list"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Subscription List Invalid Filters",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Subscription List Invalid Filters\", function () {",
                          "    var response = pm.response.json()",
                          "    pm.response.to.have.status(400);",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n  \"filters\": {\n    \"expiry\": 0\n  },\n  \"limit\": 10,\n  \"offset\": 0\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/subscription/list",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "subscription",
                        "list"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Notify API",
              "item": [
                {
                  "name": "Notify API - Invalid payload",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid payload\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_PAYLOAD\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": " {\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiI4Yjc2YWY5OS1jZjhjLTQ2NmMtYjU3Ni0xZTI5OTI0NGE3MjkiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzU5OTMxNzEzNn19.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ\"\r\n  }\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid notification headers",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid notification headers\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_HEADERS\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7fX0.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.ZuiOVAqRkPLuoTxIxAuIbTKroD80M0C_hsxgGznxElvwyFMQ32NhN4pL-jRf6EhU1-M5pJEhLgfdsZsnVyD6ETUOlIBsUUIewJB08iD1NdLwX9PxRGdjcz-2VmN-GmASRRwSSyV85CAKze4ShYcnTyUndh23QPAWltjeTfUm2umx8gWDrRFz4_6YDnmzomv03My7_lGu5gQaXQ-sxV-vz5dA8bsJ7pO0V2VhrcjX9qdctyTkIlYGXFQItccXqI7UuO4sW4hGbyIwTQbS_EJ4Kr7CRtBJtGQlVYeUyAXhxV8VEuU0y4HbdbUPc3FD4q0rEpBDT79nBAcdPsYP1kqaDA\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid sender code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid sender code\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SENDER\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiI0YjIyYjhkNy01OTAxLTQ5NzMtODQ4Mi04MDczMDlmNGM1OTQiLCJzZW5kZXJfY29kZSI6ImludmFsaWQtY29kZSIsInRpbWVzdGFtcCI6MTY2MzY0ODE2MzQ3OH19.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.etCJIagk7dzOcwXUGmzdelez4Y685cTvcych6PDtVOwV7gfiCdKmme95UGxCOmeLCgJEzHahQqiDgIltld8pPM7oI5DaO7YS7lIug9k_ANJZDlhdwTm-pTceJIf14q7TIDnMjtBQ3L5HKQUDc7XsMYajfx84sCT5ZjEQttEtqIOUuzieJQRU35X8G_POcF3SQUifUKBz7munBM0CW5SzH4GTli2nYmCeY8BuoJYXF0d5e3in8Bno-eoiMhcauaFG6tMiHEAqOFHxC3KZlZ3G8UUuz2GwFzQirpmq0k9rh5zIFHX8ykhR8zaE-zBTVg_EtkqL-LjS-EmC8xMAFYyksw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid timestamp",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid timestamp\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_TIMESTAMP\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiJlNDNjODQ5OC00Y2YzLTQwODgtYmVkYS0yNDQxNzM2NTlhNGUiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiJ9fQ.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.fpvojTObI8KvtkzVVfPG-g6vse6h06Y3HF8qv884mi-mfpA4U0SMCgwIdMzkrP9f_TyESFPcxGBFdC1XoHhLzpxBbqw36KMyBL3RjhWfVn8SYrj0bpt0_qJ3kQiWimh1j3mgbUFyw1X89M_t6VlzduHjx5dOMSNrgpbItcJacq4IXLjBSYqBmoLTXd7FCfyT7Uf_NIMaUB0htnjvUa2s3wjYFTjvYfc2ewvmkipKbi-osZuYclHx94GweeFRyGSVXMvfq89QSbo47EPxUqXJZ4xcmH1NjqCE3i1KndKfItyWiI48oFazis6F5itj4GpV3KvY5k6VGYuA1cw8CegGZg\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Empty recipient type",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid recipient type\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_RECIPIENT_TYPE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiI3MmM0YWNkZS0zNDI2LTRhNTktYjc2Ni02ZTM1NTJjOWI0ZDAiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY0ODk4MjQ5NX19.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.VSmqm_Y6xL8QOGjwWLrG_Cq93_BznCffiwDhyHG3xtpHorrVaEos6qbwlPvLzR9RntvXNuAlEdXNikGpsyLMo-7eUqYRYAdfkI6bhJF0nGInwBh1ReDu6a-d90-A0f0V_5i0cH8lUdnlVk0FKqvNK5euFsAgCdPsHQSzIsHV5cbXLwGiplj5By4US-OM7c49P1lRjLun6BQF8HUUu9T-QyjONVctPMn2RVyrnt5YsQl8BqVmMQF3VqdnPm3VwGTcPByQdXrhZCts2AVdi1IUp3EClPek8BwuozlwrIFuX0dfvjZKXSDne7sjLpxsamC3VwvuNKdEstm7YtUk06l0cg\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Not allowed recipient type",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API not allowed recipient type\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_RECIPIENT_TYPE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoidGVzdCIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiIwZjVhYjg0NS1lZjZjLTRhYzctODczNS05M2QzOWIzZmY0NzQiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY0OTA3NDc1OH19.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.A0wX5uNSHYguGQIrM8WzZ7rSJ6fhLICAAGX0Ito2E8r6g1tZGWaQ-TOVRwpFVvX1goL1E0o1BN6J__7Sd0mTQUm-prUS8E7Dlw4an1j-sbaMDNa_OIKDy53VPN3QH-AgkCN8woM_Oihvi5VLQwmRyqTe2wZKfhUkNdDA7bq1iGRuCdEtFfPR3N-9ZdaOd7fIjbCSOiteByHtJxCtsWN6Icj0bmkm7VN35OxFB8scrYD80yVel3NK1MqCRP1TCdsO7tUx05prgpDJXv_iAhY9XZAN8flYtX-dYDyiJmNPNeq-2-OJugA38K28KZEkc7OCVAbWtrIlS85GzN4N1R8F9w\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Empty recipients list",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API empty recipients list\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_RECIPIENTS\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOltdLCJjb3JyZWxhdGlvbl9pZCI6IjY2MjRlMmUyLTJmYzctNDJiMS1hMjU1LWFkYmZlMzk3Y2E1OSIsInNlbmRlcl9jb2RlIjoidGVzdDkuYWRpdHlhQHN3YXN0aC1oY3gtZGV2IiwidGltZXN0YW1wIjoxNjYzNjQ5MTgyNTAyfX0.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.QCvAHWWOwUdjRsnTP0ZEjJ8JPiYsxvB2KFIRaCloNyMxHuZYqZE18nx-vAnxtD2B66k9dHsZ4E9rRDKH6O13-RwxdM33YB4CVrAkuGhmpwUfwHn1a0itwKnNrOulXheE4VZbpZ1fBDmzX1Ir9IA-36f2qU4ZrM90lZ7EHzL4KXioW_3-LQaCKEkS7W2lB3_ZgrcwyXoAmTRZKiKgpj4CIysMy_50xNESvNshAISwGoS_fY4cNxGk0KZOXTiHuHCTt7fdiYC-rsk1HBhlwv3Sc17V_6bnBBzd3AC8YMgKeJ6bcX9R2y8J3l6I4rgg53a0KB-2idm2RAzlQ3Ur2XPWiA\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Empty topic code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API empty topic code\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_TOPIC_CODE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiJhNGZiZmE3OC0zZjQ2LTQ0MzItOTRkZC01N2YyNGY5YzVmMzAiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY0OTI4Mjc2MX19.eyJtZXNzYWdlIjoiSUNJQ0kgU3lzdGVtIHdpbGwgYmUgZmFjaW5nIGRvd250aW1lIGZyb20gMjYtMDctMjAyMiB0byAyOC0wNy0yMDIyIGR1ZSB0byBwbGFubmVkIG1haW50ZW5hbmNlLiBTb3JyeSBmb3IgaW5jb252ZW5pZW5jZSBhbmQgcGxlYXNlIHBsYW4geW91ciBvcGVyYXRpb25zIGFjY29yZGluZ2x5LiJ9.ZdkBqlPsy1_JEq9Z8XteK59YgWGCDImwr57q7241g8vtoPBsrcL6i6X0uo8NGf64QIYLEH4lif4iSxuhJp9dfFIB3vbUKjTpNpLQmEAwWzTHaPWmROvyS0xp8Lwwjuyap0f6OprpLCTbfjQADQAXrGDbSgkIIScjZuvExWVmVVBzSCYL6onEJw6CJtZoxaNqcrVsOq9_WZw4Wxg3g2Q2I3feFAAgLJjOIyHrHMFLa0wKbqZUeD8twfh_3JMMxLyhO-EHFBJLg0dfyoH4j7WDgoc-1MLrpMJ5aANjY8h4iWFO2rF8tXO_765ce2FfeNJBZab9elxL8bXb1IPVNxY2OQ\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid topic code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid topic code\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_TOPIC_CODE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiIyYTdjM2JhZi1mNTk2LTRjMDAtOGJmYS1mYjJjZjYwNmE3MGYiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY0OTMyOTg2MH19.eyJ0b3BpY19jb2RlIjoiaW52YWxpZC1jb2RlIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.hZ5uUSXFCDovkUzo_IAj12XQ6RWhvjZjenkZIQXaxnnmFvQwC_JMABIWbvG1Re92hnDQU6HciGQyfBHhHMrrS1jQD11RguWy3_KF0Sx7N6RGXmFGI8jWKz_VHWD84zxp9gjr899kUaLKji6_Zcl4R_y7CkaL4Zyx71BYMGj1ostb5my7W272trbAEDtZwlLkV95nkrGyhmBka4PthREFClycX2aB-EhBne7ZPpCFnfQyiixuUkQci-G6XbHCrCOpnd9mn6-QbBpPoYXkAYzyLTWPyiMVO8IRsrlP6FH65Qo_CiFuCulVtiZhRsItj_s5jj_Ec_TfLrVavqVlR4TQhw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Missing notification message",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API missing notification message\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_MESSAGE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiI0NzFhNWQ2YS00NWE2LTRmYmQtYjQ4YS1hMGFiZjNiOWZiNzQiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY0OTY0NjU3Nn19.eyJ0b3BpY19jb2RlIjoibm90aWYtY2xhaW0tcmVpbWJ1cnNlbWVudC1pbmFjdGl2ZSJ9.AoRLscLY3CDrRkahYzEvw7WxQrXL6rS5gIgY7FJ2u4JrM4fgp1p92PC2Dy9LJ5Jvqp3Ry9tZaI675wKdGR_mf733dk1QH44_p1ZJBF6EHTgnqQN2GRTiqFyqy0Rwm2ewWkZNyxm7EoNimPN2HQew3VSJ3PIaSoc2zeUacmuhJm5bf2SwQhljlRNh8Tq1d-7CwW_E70q7rLTZAyuwgHTB_RovdLybJ-VXKBM0pY6UrS7EHlit2qpN5Ky6aNSssnpQ3JFmYFrKhjgFDg26QcqVZQzWRC14VpOXPzZd3YkuCdGCwNQo1uJq_ObTQqY_w1f_7EgTn7txp3_mhH5oTVTRrw\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid expiry",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid expiry\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_EXPIRY\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": " {\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiJjMmI1OTk5Mi1hYjZjLTRlZTYtYjllNy02MmFkMDg5MjU5NzgiLCJleHBpcnkiOjE2NjM2NTI4Mzc2NTksInNlbmRlcl9jb2RlIjoidGVzdDkuYWRpdHlhQHN3YXN0aC1oY3gtZGV2IiwidGltZXN0YW1wIjoxNjYzNjU0NDU4MjQyfX0.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.OePqgWu_Zq8w_mCnZwgOIlPmWBPypdSlH8LiB-lghiVhxViscgAh2TxOT_HHmA00kvC9syEuOEfULQgv-Cl5OoBG2aWUDnszR0YCW9meQb1FahBqMj6v19FYHoHc06E7TeK8Xoi3e1RJd7mZyTeDq5iUHAQRtXYmYtjAiDFyxMg2hX_3lW8MMAwuT65DnlygIGzhPaxL4s2A3wZWl577t4Avi5rDA85Ckf5T6Cuo1w5rv7we8EXUKOKvjUdfxmkEaV05PjTLqbkKus9Az1TpBPI1PzsyvOf5rZG8puKAQAnpFMg_hxiwefdGZcXcbr4LBZcGzX9Dp0iysOwfBNQdSQ\"\r\n  }\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid JWS signature",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid JWS signature\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_SIGNATURE\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsicGF5b3IiXSwiY29ycmVsYXRpb25faWQiOiIyYzAxYTFjMi05NjlkLTRiYTAtYWRhYy1hN2VlNDE3MjRkNjQiLCJzZW5kZXJfY29kZSI6InRlc3RwYXlvcjEuaWNpY2lAc3dhc3RoLWhjeC1kZXYiLCJ0aW1lc3RhbXAiOjE2NjM2NTIzMzkwNDF9fQ==.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.mtuJFpRaUQjUo7An2IH16G6nJDRdFpreT0jkujTR34Pf-dhNh2wajc_jHyD7ODH1ZTftjNesw9MfWO0NMyTlR9qexJkNNrgtOnNKR8TE0TXCmSzw9SRd6mol68S1XDHZDJ0bkQFhvLVn3UDKgHYu0xWRPbrjR8RdC-hKLJNTUefMe_XqHEnqLoNVy9LXCNFckafwtxKU_NvER9w-_lo5SU58wJOD7UIvPUs7kyAmuPqUI2_RLeFjnfU9HgNJpCT23Oirgeh1Be07mlJCwi7DrvG7XV6sD49PBGN5_r1f9xoHA6Hmf42gHhhFeRj7EvekMGZuKZ0zL6BV5aDV3pLkrg\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid recipients - participant code",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid recipients - participant code\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfY29kZSIsInJlY2lwaWVudHMiOlsidGVzdC1jb2RlIl0sImNvcnJlbGF0aW9uX2lkIjoiMmE3YTRiM2YtMzY1Ni00YWFiLTg2NjQtOGJiNzIzYzdlZjQ2Iiwic2VuZGVyX2NvZGUiOiJ0ZXN0OS5hZGl0eWFAc3dhc3RoLWhjeC1kZXYiLCJ0aW1lc3RhbXAiOjE2NjM2NTI2OTc3NjJ9fQ.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.BeavVavzjbtJ_FOS3UKppI9cw1mi0NIusIRbgRiDsZQJIDk83Vq1r3j56MiFMdE-5st43utLoLctzLbRolmauB6oA9FB9dVWXBc87HFH8FGOj-BRYM8AByBgKfnwJ4Jd0vvwp1vLswml4RtE__RwzyQ9r7qtZxb122jzSSDHIc6aj9beNs719-XZsI9b3g1GxRs4TnrS02ZJZNRQ7S5f_pYHZX0BNZ31Bbr2xVFKwk7cevffxLGfDyRZEbHCZfeumTiKz-0Z9GTXYyAaORFVgpGKT48Eoa9r-ktXBEF_y6YyNt-R_xc7FeAgV3oLvBqvZIg0t5_wlVmW8EB1bT636Q\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid recipients - participant role",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid recipients - participant roles\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoicGFydGljaXBhbnRfcm9sZSIsInJlY2lwaWVudHMiOlsidGVzdC1yb2xlIl0sImNvcnJlbGF0aW9uX2lkIjoiYzZhY2E2NTUtYzBhZi00MjQwLThkODctOWEzYTQ4MDllNWFjIiwic2VuZGVyX2NvZGUiOiJ0ZXN0OS5hZGl0eWFAc3dhc3RoLWhjeC1kZXYiLCJ0aW1lc3RhbXAiOjE2NjM2NTI4MjMzMzZ9fQ.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.N4Y1HQUBGjO4f7ky15duPh1EqwqQh821F3ob9_IAkpAcEmWhISKWrmdSOAAB88MBiXdE7NB0iBP7E6H8hcPPKc6bQTOECA48bNnvWJ8553aDEQ1Qpg0Bu2dU0WqWCAOJCdZvTufno4UlSlSv8MqIeUfM0ihmnXHt9ZJodAl5HPAoQxfk-Ic1lrVwbFfhzRz4XDT-LdfVlFQTjyGiJjLtXoShHM2aU2cRubgaIUN8A6FItsbiuTRcpFVOnYazNFOGbu4WhS4rgH66oquXp4xcvw7phD5PJKg5dF4mDXfIiUzg8Qf3u069oL-9qL_ZH5Zyg36pZf3cQIkMATE7WnL-5g\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - Invalid recipients - subscription",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API invalid recipients - subscription\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "    pm.response.to.have.status(400);\r",
                          "    pm.expect(response.error[\"code\"]).to.eql(\"ERR_INVALID_NOTIFICATION_REQ\");\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{provider_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"payload\": \"eyJhbGciOiJSUzI1NiIsIngtaGN4LW5vdGlmaWNhdGlvbl9oZWFkZXJzIjp7InJlY2lwaWVudF90eXBlIjoic3Vic2NyaXB0aW9uIiwicmVjaXBpZW50cyI6WyIxZTY0ZWNiZi1iYzQ3LTQ4NzgtOWE1Ni01MmNiNGVjZTExMWUiXSwiY29ycmVsYXRpb25faWQiOiJhMzJhYjc5OC04YmM4LTRiN2UtOTIyZS01MDg1YWY3OTY0NDUiLCJzZW5kZXJfY29kZSI6InRlc3Q5LmFkaXR5YUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2MzY1MzQ4NzQ1M319.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtc3lzdGVtLWRvd250aW1lIiwibWVzc2FnZSI6IklDSUNJIFN5c3RlbSB3aWxsIGJlIGZhY2luZyBkb3dudGltZSBmcm9tIDI2LTA3LTIwMjIgdG8gMjgtMDctMjAyMiBkdWUgdG8gcGxhbm5lZCBtYWludGVuYW5jZS4gU29ycnkgZm9yIGluY29udmVuaWVuY2UgYW5kIHBsZWFzZSBwbGFuIHlvdXIgb3BlcmF0aW9ucyBhY2NvcmRpbmdseS4ifQ.MIfB4JgtWkJTu_6LSluw3DRtjpMcKvqJlA8OTmrIzXBnHkAcc9LYNQzfIyHLiV8F_0-IAvHva5xgPFvLNPSPrAL6h6EDnzng1jHXnTbpgI2cOm9wc40iFuuskp08PHkX_VuRvNXhekbiSAwhBnKWYfoSmHpaXfbMRgPbl8I-_wmpc0r6kmy1gxAJe2BGLaNi0XubQbq_zDSOIviUUpdju5O92tSJIoW2RWSTKPlOG0w6JY3-xJY1dUVW_6ZvHiJ1RG4Gn-RkfixOrwbubNqHZTI-eHTf1Xe132kW2uThoeluy-8HGTHybgIiDT36ks9lg-gGvgfV_4MOGB3jWYSHcQ\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Notify API - success",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Notify API success\", function () {\r",
                          "    var response = pm.response.json()\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "auth": {
                      "type": "bearer",
                      "bearer": [
                        {
                          "key": "token",
                          "value": "{{payor_token}}",
                          "type": "string"
                        }
                      ]
                    },
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": " {\r\n    \"payload\": \"eyJ4LWhjeC1ub3RpZmljYXRpb25faGVhZGVycyI6eyJyZWNpcGllbnRfdHlwZSI6InBhcnRpY2lwYW50X3JvbGUiLCJyZWNpcGllbnRzIjpbInByb3ZpZGVyIiwicGF5b3IiXSwieC1oY3gtY29ycmVsYXRpb25faWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTQiLCJhbGciOiJSUzI1NiIsInNlbmRlcl9jb2RlIjoidGVzdHBheW9yMS5pY2ljaUBzd2FzdGgtaGN4LWRldiIsInRpbWVzdGFtcCI6MTY2Njk0NjU5MzUxNn0sImFsZyI6IlJTMjU2In0.eyJ0b3BpY19jb2RlIjoibm90aWYtcGFydGljaXBhbnQtbmV3LXByb3RvY29sLXZlcnNpb24tc3VwcG9ydCIsIm1lc3NhZ2UiOiJQYXJ0aWNpcGFudCBoYXMgdXBncmFkZWQgdG8gbGF0ZXN0IHByb3RvY29sIHZlcnNpb24ifQ.QB8docHeBb_sPg0nDW8w5Y8urm9mZeW1geooGLEVjCSW3zSWCz8mfwWPWPv-Y4BXkjuUJssTRpW1gH1089f7aKtWMKr9Y1AOVZvNGcr7sQImwy5LmsqyMvTk295ulK3tqTD_rxFdrxE2B29iB0QZeLJ1tvP9XHOVYyaliZTMboEhcUYqUIt2JfIx3YIibF4EPxUJsl7AfqLbfQFkpHgWXh16mCfj7GnDx5HcZR7RXQv8MbUkSKdZlEFR4iyGbnAevqhesmyKY9QX7EIiOLvo2r-ZrviPnjkZddhMJqc5kQvnltxFq7ohMQP3Tai_OkFvaQYS5Rz7TYBH0na1iNtGwA\"\r\n  }\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/{{api-version}}/notification/notify",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "{{api-version}}",
                        "notification",
                        "notify"
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Audit APIs",
      "item": [
        {
          "name": "Audit notification API",
          "item": [
            {
              "name": "success",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Audit notification API success\", function () {\r",
                      "    var response = pm.response.json()\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filters\": {\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/audit/notification/search",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "audit",
                    "notification",
                    "search"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Audit API",
          "item": [
            {
              "name": "Audit API",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Audit API success\", function () {\r",
                      "    var response = pm.response.json()\r",
                      "    pm.response.to.have.status(200);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{provider_token}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"filters\": {\r\n        \"x-hcx-api_call_id\": \"f215049f-94ef-4e18-8fc9-f692abd7e5c4\"\r\n    }\r\n}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{host}}/{{api-version}}/audit/search",
                  "host": [
                    "{{host}}"
                  ],
                  "path": [
                    "{{api-version}}",
                    "audit",
                    "search"
                  ]
                }
              },
              "response": [
                {
                  "name": "Audit API",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"filters\": {\r\n    }\r\n}\r\n",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{host}}/v1/audit/search",
                      "host": [
                        "{{host}}"
                      ],
                      "path": [
                        "v1",
                        "audit",
                        "search"
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "transfer-encoding",
                      "value": "chunked"
                    },
                    {
                      "key": "X-RateLimit-Remaining",
                      "value": "-1"
                    },
                    {
                      "key": "X-RateLimit-Requested-Tokens",
                      "value": "1"
                    },
                    {
                      "key": "X-RateLimit-Burst-Capacity",
                      "value": "20"
                    },
                    {
                      "key": "X-RateLimit-Replenish-Rate",
                      "value": "10"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    },
                    {
                      "key": "Date",
                      "value": "Tue, 14 Jun 2022 09:34:02 GMT"
                    }
                  ],
                  "cookie": [],
                  "body": "[\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198481562,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198481562,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"f85cc5f8-0106-4f83-9729-4d2b0cbb6e58\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6Ijg2Y2ZmYWJhLTMxYTYtNDk4My1iZDgyLTY3MTM5MWIyYWQ0MSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjEuMjk3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjdiMmQ0NjA3LTE0YjUtNDI3YS1hNTUxLWU1OTkwZDYzODI2ZiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_ACCESS_DENIED\",\n            \"message\": \"Caller id and sender code is not matched\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"7b2d4607-14b5-427a-a551-e5990d63826f\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"86cffaba-31a6-4983-bd82-671391b2ad41\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:21.297+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198482084,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198482084,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"f2f6d5e7-a902-4c91-baba-42fd92c43d31\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTUiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjY0OGU3YmNmLTg5MWQtNDllMS1iZmNlLTQzYjUyMDFiZTMyYiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjEuODA4KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImQ2OTYwY2M5LWYwYjgtNGEyOC05OWQyLTEyMWFmZDkwMTBkNSIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient  is blocked or inactive as per the registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-5\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"d6960cc9-f0b8-4a28-99d2-121afd9010d5\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"648e7bcf-891d-49e1-bfce-43b5201be32b\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:21.808+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198482307,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198482307,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"317de1f4-95f1-4056-8629-381aea363c42\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6Ijg4MzQ5OWU0LTE0YmQtNGE1NS04MTc0LWUwOGUyNTgxYTkxZCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjIuMDc3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_API_CALL_ID\",\n            \"message\": \"Api call id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"883499e4-14bd-4a55-8174-e08e2581a91d\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:22.077+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198482574,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198482574,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"3dfa2b6a-f4d8-411b-803f-4b323517c857\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjIuMzE0KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjI0OWRlOTE0LTY4ZDUtNDg2My1iZTJiLWUyYzhiOGNmMTFlMiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_CORRELATION_ID\",\n            \"message\": \"Correlation id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"249de914-68d5-4863-be2b-e2c8b8cf11e2\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:22.314+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198482832,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198482832,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"71894f86-5ca7-455e-97fb-4e94472e2b33\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjQ4MWZhNzMwLWViNzYtNGMzYS05MzgyLTQ1ZWEyOGQ2OWY3MyIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjIuNTYzKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjEyNDE2ODI1LWRjNTctNDJkYi04MTg4LThkZDFhMzNlNTU4OCIsIngtaGN4LXdvcmtmbG93X2lkIjoiIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_WORKFLOW_ID\",\n            \"message\": \"Workflow id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"12416825-dc57-42db-8188-8dd1a33e5588\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"481fa730-eb76-4c3a-9382-45ea28d69f73\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:22.563+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198483047,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198483047,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"b42ac998-f1ca-4f32-8acf-0fa3b443c06f\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjU2YmFmMzdkLWVlNDYtNGQyOC1hZmVhLWY0NDM4YWFmZmZmZCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDUtMTJUMTU6MjY6MTkuNjI3KyIsIngtaGN4LWFwaV9jYWxsX2lkIjoiMzNmYjUxOGQtNmI0Ny00MGQxLTg5MTQtMzBiZTA3ZWUyN2QyIiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_TIMESTAMP\",\n            \"message\": \"Timestamp should be a valid ISO-8061 format, Exception msg: Invalid format: \\\"2022-05-12T15:26:19.627+\\\" is malformed at \\\"+\\\"\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"33fb518d-6b47-40d1-8914-30be07ee27d2\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"56baf37d-ee46-4d28-afea-f4438aaffffd\",\n        \"x-hcx-timestamp\": \"2022-05-12T15:26:19.627+\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198483299,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198483299,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"86b5928e-8c45-4f9a-b1b5-27bba2fc0b0a\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImQ5ZDA2ZTliLTNiZTAtNGE0Yy05MDcwLTljM2RjYzM0MzlkNiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjMuMDQ3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjBjZjI2N2VkLWVkOTgtNDM4Mi1iY2JlLWU5YzM1MzAwYzY3NSIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIiwieC1oY3gtc3RhdHVzIjoicmVxdWVzdC5jb21wbGV0ZSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_STATUS\",\n            \"message\": \"Status value for *action API calls can be only: [request.queued, request.dispatched]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"0cf267ed-ed98-4382-bcbe-e9c35300c675\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"d9d06e9b-3be0-4a4c-9070-9c3dcc3439d6\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:23.047+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198480027,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198480027,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"7c1a018a-fd26-44a9-aed8-59d8c25ea4b7\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjNlMGMwOTQ3LWM3YTYtNDkyNi05YjYzLThjYzIwMDg4NDc2MSIsIngtaGN4LWFwaV9jYWxsX2lkIjoiNzMzZjU2YzYtNzAzZC00MzJlLWFhODAtZjkyNmRiYTUyYjJhIiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_MANDATORY_HEADERFIELD_MISSING\",\n            \"message\": \"Mandatory headers are missing: [x-hcx-timestamp]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"733f56c6-703d-432e-aa80-f926dba52b2a\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"3e0c0947-c7a6-4926-9b63-8cc200884761\",\n        \"x-hcx-timestamp\": null,\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198481309,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198481309,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"32291a27-e099-4342-9251-175ac5d907b7\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoidGVzdC0xMjMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImQ3YmNiNGE0LTZmMGQtNGJkYi05YThkLTRiMWE5NzgyMDM4YyIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MjEuMDUwKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjQ0OGQ1NjA0LTUxNGUtNDUwNy04Y2VjLTEzYTNlNmI2NjM3YiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient does not exist in registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"test-123\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"448d5604-514e-4507-8cec-13a3e6b6637b\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"d7bcb4a4-6f0d-4bdb-9a8d-4b1a9782038c\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:21.050+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198634229,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198641519,\n        \"action\": \"/v1/predetermination/submit\",\n        \"mid\": \"6dc322e2-87ee-491e-9285-acb8e7bb59ba\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjU3YjgxNGU2LWNhODUtNDNhNS1hZDBhLTRjZDIyZTcyMGQxMCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6NTMuOTczKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjI0YmE4NTgxLTI0ODYtNDhiOS1iZTEwLWRjZDk5YjdhMDA1YyJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"24ba8581-2486-48b9-be10-dcd99b7a005c\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"57b814e6-ca85-43a5-ad0a-4cd22e720d10\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:53.973+0530\",\n        \"x-hcx-status\": \"request.dispatched\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812541,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198824900,\n        \"action\": \"/v1/claim/submit\",\n        \"mid\": \"358a1d66-1ddb-4392-babc-56236041db09\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjVhNzZiZDgyLTBhZGUtNGEzYi05MGIzLWU2NjhjZTY4MzNiZiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6NTYuOTYzKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjRhYjVjN2JmLTNmNTMtNGU1ZS1hMDRmLTE5ZjhlNjFiNjEyZCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"4ab5c7bf-3f53-4e5e-a04f-19f8e61b612d\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"5a76bd82-0ade-4a3b-90b3-e668ce6833bf\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:56.963+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812540,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198821769,\n        \"action\": \"/v1/preauth/submit\",\n        \"mid\": \"fc70ba48-dfa7-4b34-b45f-0ac466bcd38f\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImUwZmE3OWJiLTNjZGUtNGQ1ZS04MDNhLTQyMTZhNjQ5ZGU0YyIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6NDkuNDQwKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjUwOWFhZTQ5LTRiNjItNDkxYi05ZWQyLTBlMjgyZjY5OGNjMCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"509aae49-4b62-491b-9ed2-0e282f698cc0\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"e0fa79bb-3cde-4d5e-803a-4216a649de4c\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:49.440+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812538,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198818725,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"7178bf54-b75e-4f1c-9f22-eea337a7ca9a\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImY3ZmM1MmI1LWQzZTktNGY1Ni1hZWIwLWNjNDc1MTNiMzc3NyIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6MTYuNTE4KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImJkNzc0YzM2LTk1MWQtNGIzMS1hMzE3LTI5ZGI3MzUwMTgwNyJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"bd774c36-951d-4b31-a317-29db73501807\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"f7fc52b5-d3e9-4f56-aeb0-cc47513b3777\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:16.518+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812564,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198855177,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"2f46491a-13a6-4344-923a-b7bb6bf96b86\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjU1NzRkNDMzLWJjODUtNGZmMi1iMTlhLTA1NjYxNTUzOTg2MCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDIuMTQyKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjBkNTYzYTI1LTBjMjUtNDYxYi1iZGM0LTk1N2NlMGFiMjRlZCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"0d563a25-0c25-461b-bdc4-957ce0ab24ed\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"5574d433-bc85-4ff2-b19a-056615539860\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:42.142+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198839938,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198847171,\n        \"action\": \"/v1/claim/submit\",\n        \"mid\": \"4493acea-f311-491f-8cf7-c17f9262156d\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImM2MWM3NGUyLWQyNTItNDM3YS1iMDI0LWNmZDAxNTlhOGZiYiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTc6MTkuNjczKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjRkZWU0YWVlLTcxNWEtNDc0Yi1iMThiLWY0MWFjZTc1ZTlhZiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"4dee4aee-715a-474b-b18b-f41ace75e9af\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"c61c74e2-d252-437a-b024-cfd0159a8fbb\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:57:19.673+0530\",\n        \"x-hcx-status\": \"request.dispatched\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812557,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198843103,\n        \"action\": \"/v1/preauth/submit\",\n        \"mid\": \"b94b31c9-2d4e-4a7d-9248-067157fe1faf\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjA5YTQ2MDQzLTAzYWQtNGIwMi05ZGU2LTJkNDM1Y2M5ZDRjMCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTQ6MDEuNTY5KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjgyMGUzNzJmLTljNzItNDM4Mi1iZTk3LWM1YTA5NGNiMmNjMyJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"820e372f-9c72-4382-be97-c5a094cb2cc3\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"09a46043-03ad-4b02-9de6-2d435cc9d4c0\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:54:01.569+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198854723,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198857845,\n        \"action\": \"/v1/paymentnotice/on_request\",\n        \"mid\": \"52186fea-d238-4ab7-b4e3-a4862c0d288a\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjE4ZDg0YWU4LTNkYjgtNGJhNy1iZjBlLWQ5MGMyMjcyODViZSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTc6MjcuNDQwKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjZhN2M1NGI4LTA0MjQtNGI3NS1iYmY3LTIxZGRhNTQ4OTE3NyIsIngtaGN4LXN0YXR1cyI6InJlc3BvbnNlLmNvbXBsZXRlIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"6a7c54b8-0424-4b75-bbf7-21dda5489177\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"18d84ae8-3db8-4ba7-bf0e-d90c227285be\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:57:27.440+0530\",\n        \"x-hcx-status\": \"response.complete\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812560,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198849136,\n        \"action\": \"/v1/claim/submit\",\n        \"mid\": \"ac564cea-3abe-4121-b053-a3106e9c6975\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjRmMDZlODk5LTFkODItNDg1NC04MzhjLWNiYWM2N2E3MjM5MSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTQ6MDkuMTQyKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjQ3NTQyNjQ2LTQ3ZjYtNDdhNS1hODczLWVjYTM4Mzg0N2IyNiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"47542646-47f6-47a5-a873-eca383847b26\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"4f06e899-1d82-4854-838c-cbac67a72391\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:54:09.142+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198532037,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198532037,\n        \"action\": \"/v1/paymentnotice/on_request\",\n        \"mid\": \"fba60eec-b652-42a6-a8e8-a0c5b5273bad\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImU3YmI5MTMwLTRkOTgtNGU0MS1hOThlLThkZjUwZGVhZTM0YSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTI6MDQuNzc1KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjMwNTQ4YWNlLWU2NjMtNDFmMS05ZDE0LTcxMjFhYTM3MDZmZCIsIngtaGN4LXN0YXR1cyI6InJlc3BvbnNlLmNvbXBsZXRlIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_CORRELATION_ID\",\n            \"message\": \"Invalid on_action request, corresponding action request does not exist\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"30548ace-e663-41f1-9d14-7121aa3706fd\",\n        \"x-hcx-workflow_id\": null,\n        \"x-hcx-correlation_id\": \"e7bb9130-4d98-4e41-a98e-8df50deae34a\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:52:04.775+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198502118,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198505294,\n        \"action\": \"/v1/predetermination/submit\",\n        \"mid\": \"70a09af4-6290-437b-9a5f-57ded818ea7c\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjAyZTA1ZWIxLTBlYWUtNDFiNy04Y2M0LWI5YWIzNTg3MmJjZCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTE6NDEuNzY1KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImY1YTdmZWM5LTRlNWUtNGZmNy04MTZjLWY5MTBlMjliMTllOSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"f5a7fec9-4e5e-4ff7-816c-f910e29b19e9\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"02e05eb1-0eae-41b7-8cc4-b9ab35872bcd\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:51:41.765+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198613608,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198613608,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"911f910c-5dc1-4cef-aa3e-00c04fddca4a\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTUiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjYxZmRhZGQ2LTQ0MDUtNDhjNy05NmQ1LTNjZThiNzg3NmJmYiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzMuMjkxKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjQyYjZkMThhLWYwZDctNDVhNi04MDBhLWIyYjFhMjExY2Y2YiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient  is blocked or inactive as per the registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-5\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"42b6d18a-f0d7-45a6-800a-b2b1a211cf6b\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"61fdadd6-4405-48c7-96d5-3ce8b7876bfb\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:33.291+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198613851,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198613851,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"ff10ac71-ec4b-4797-9556-b1fd5bf990ce\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjU1OWQxNDY2LThlMTAtNGNiNS1hODQ2LTQ2MTlmZTc3ZDA4MiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzMuNjAwKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_API_CALL_ID\",\n            \"message\": \"Api call id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"559d1466-8e10-4cb5-a846-4619fe77d082\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:33.600+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198614073,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198614073,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"b112e804-4f6f-4c1d-8851-b6b505af1e4d\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzMuODMzKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImQyNjIzZDk2LTVkM2QtNDJhYi05ODU4LTRkNWJjZjE2ZTA0MSIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_CORRELATION_ID\",\n            \"message\": \"Correlation id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"d2623d96-5d3d-42ab-9858-4d5bcf16e041\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:33.833+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198614293,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198614293,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"c30cb487-0656-46e0-a373-551cb3a68114\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjdjZGE1OWE3LTc4NDktNDYxYS04Y2NiLTQyMzE0OWUzYTRmYiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzQuMDY3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjBlODlhNzU2LTAxYzYtNDRkNS1hOTc3LWM5YTNjNWQ4ZmRiZiIsIngtaGN4LXdvcmtmbG93X2lkIjoiIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_WORKFLOW_ID\",\n            \"message\": \"Workflow id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"0e89a756-01c6-44d5-a977-c9a3c5d8fdbf\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"7cda59a7-7849-461a-8ccb-423149e3a4fb\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:34.067+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198614522,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198614522,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"0be070b4-7dcf-4bdb-9f9c-91610565a900\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjBmNDNjYTc4LTczZTItNDVkMi05ZTdlLTNjZmVkNDI5MmQ4OSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDUtMTJUMTU6MjY6MTkuNjI3KyIsIngtaGN4LWFwaV9jYWxsX2lkIjoiNjRkOTk4ZjEtMzM1MS00NTk5LWI0ZWMtYzc4MjhiYmIzZTRjIiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_TIMESTAMP\",\n            \"message\": \"Timestamp should be a valid ISO-8061 format, Exception msg: Invalid format: \\\"2022-05-12T15:26:19.627+\\\" is malformed at \\\"+\\\"\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"64d998f1-3351-4599-b4ec-c7828bbb3e4c\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"0f43ca78-73e2-45d2-9e7e-3cfed4292d89\",\n        \"x-hcx-timestamp\": \"2022-05-12T15:26:19.627+\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198612906,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198612906,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"cbdb89b5-9bbe-4891-8358-399c85067214\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoidGVzdC0xMjMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjEwYTE4YTQ0LThiZjUtNDExYS1iNGRlLTllZGE5ZGI0YzMzMCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzIuNjU3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImJmNjVhYmE4LTAxNGYtNGM2Zi05YTFlLTYzMzc4MmM0NTYwMCIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient does not exist in registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"test-123\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"bf65aba8-014f-4c6f-9a1e-633782c45600\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"10a18a44-8bf5-411a-b4de-9eda9db4c330\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:32.657+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198613099,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198613099,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"ae5f211d-ad04-481d-9f98-80a0e6091fec\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImI1MTJjMmI4LWJmZTAtNDRiMS04MDNmLTkyNTE1YjIwZTEzOCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzIuODY4KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImVjOWIyMjYwLTFjZGYtNDNmMC04ZWI3LTlkNzMxZDQ2MTY2MyIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_ACCESS_DENIED\",\n            \"message\": \"Caller id and sender code is not matched\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"ec9b2260-1cdf-43f0-8eb7-9d731d461663\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"b512c2b8-bfe0-44b1-803f-92515b20e138\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:32.868+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198614757,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198614757,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"952a9787-e6f5-4c04-a8bd-c7ae90709755\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImUxMzZkNGZmLTg1ZmYtNGRiYy1iZTZmLTY4M2YwNjA5YzRiYSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzQuNTE5KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjkwNDgwNGYzLTY4Y2ItNDgxNi04NjFjLTI4MmI1MmFkNzBkMiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIiwieC1oY3gtc3RhdHVzIjoicmVxdWVzdC5jb21wbGV0ZSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_STATUS\",\n            \"message\": \"Status value for *action API calls can be only: [request.queued, request.dispatched]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"904804f3-68cb-4816-861c-282b52ad70d2\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"e136d4ff-85ff-4dbc-be6f-683f0609c4ba\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:34.519+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198612470,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198612470,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"dd7442b0-8e66-4e19-a504-1a6e7a791f8f\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImFkMTgxZWJiLTVmNjctNGNjNi05ZGMzLTkzOWQ0NmJiNWY5MyIsIngtaGN4LWFwaV9jYWxsX2lkIjoiZGFjNTMzMDQtMTc2MS00YWMyLTkzNWUtNjBkNjQwZWY4MWI5IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_MANDATORY_HEADERFIELD_MISSING\",\n            \"message\": \"Mandatory headers are missing: [x-hcx-timestamp]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"dac53304-1761-4ac2-935e-60d640ef81b9\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"ad181ebb-5f67-4cc6-9dc3-939d46bb5f93\",\n        \"x-hcx-timestamp\": null,\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198664216,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198664216,\n        \"action\": \"/v1/paymentnotice/on_request\",\n        \"mid\": \"7e62558f-144e-4a27-8c00-1d385f539e9f\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImNlMjllMzBkLTc3MDUtNGE0NC1iN2Y1LTUwNWIyMDViZGZlMiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTQ6MTYuOTI4KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjNhNzBjY2E2LTAwYzItNGE1NC05OWFmLTBkMjVkZTg0NGM5NiIsIngtaGN4LXN0YXR1cyI6InJlc3BvbnNlLmNvbXBsZXRlIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"INTERNAL_SERVER_ERROR\",\n            \"message\": null,\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"3a70cca6-00c2-4a54-99af-0d25de844c96\",\n        \"x-hcx-workflow_id\": null,\n        \"x-hcx-correlation_id\": \"ce29e30d-7705-4a44-b7f5-505b205bdfe2\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:54:16.928+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198804978,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198804978,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"2a3188a7-43b3-42ea-8363-f125bc76d919\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjBmOWFkYmYzLTM2ZjAtNGJhMC1iYTkxLTIxYjhhNGQyNTMwYSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDQuNzc0KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_API_CALL_ID\",\n            \"message\": \"Api call id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"0f9adbf3-36f0-4ba0-ba91-21b8a4d2530a\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:44.774+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198805182,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198805182,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"0754b46b-e016-49c0-ac4d-9698d447984e\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDQuOTUyKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjA5NzUxNmM0LTQ4MGEtNDQ2OC1hY2RjLWIyYTk5ZmUwODkyMCIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_CORRELATION_ID\",\n            \"message\": \"Correlation id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"097516c4-480a-4468-acdc-b2a99fe08920\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:44.952+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198805430,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198805430,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"529da8c7-a545-4ac6-ae04-f6abd3abc343\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjBjYmY4YTU4LTczZjctNGRiNS04ZjMxLTcxMDVjNWZlMjRiNCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDUuMTg2KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImQwNWFlNTdhLTFlN2QtNDg1OS04MTNjLWI0ZDIxODYyYzk4YiIsIngtaGN4LXdvcmtmbG93X2lkIjoiIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_WORKFLOW_ID\",\n            \"message\": \"Workflow id cannot be null, empty and other than 'String'\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"d05ae57a-1e7d-4859-813c-b4d21862c98b\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"0cbf8a58-73f7-4db5-8f31-7105c5fe24b4\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:45.186+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198805650,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198805650,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"5b6afcf6-167f-41f2-9d0b-7c61a74a803d\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjYwM2VhYjM2LWE4NTctNGY0Ny04ODk0LTU5NDI3NWNhZGNmYSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDUtMTJUMTU6MjY6MTkuNjI3KyIsIngtaGN4LWFwaV9jYWxsX2lkIjoiNTMxZmY5ZTUtOTJiMC00OTFkLWFkYTAtNmQ5YzM1NGQyYTgxIiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_TIMESTAMP\",\n            \"message\": \"Timestamp should be a valid ISO-8061 format, Exception msg: Invalid format: \\\"2022-05-12T15:26:19.627+\\\" is malformed at \\\"+\\\"\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"531ff9e5-92b0-491d-ada0-6d9c354d2a81\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"603eab36-a857-4f47-8894-594275cadcfa\",\n        \"x-hcx-timestamp\": \"2022-05-12T15:26:19.627+\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198805876,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198805876,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"84ed5d70-191c-4f71-a247-cc6067677d8c\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImI0M2U5N2U3LTRjMjUtNDAzNy05OTI5LWU0ZGJjYzBhMzlmOSIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDUuNjM1KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjgwMDMwMmY4LTFmODUtNGE2YS04NjZkLTk2MTdjZjhmZGRhNiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIiwieC1oY3gtc3RhdHVzIjoicmVxdWVzdC5jb21wbGV0ZSJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_STATUS\",\n            \"message\": \"Status value for *action API calls can be only: [request.queued, request.dispatched]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"800302f8-1f85-4a6a-866d-9617cf8fdda6\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"b43e97e7-4c25-4037-9929-e4dbcc0a39f9\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:45.635+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198804138,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198804138,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"b228964d-4a04-44b3-aa51-cff5d2bb35ea\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoidGVzdC0xMjMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjUzYzQ4MWE4LTkwOTAtNGQ2Mi1hMTI2LTQ4MWUwNmJlMTViYiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDMuOTAyKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjM4MjBmYjNhLTZmZDUtNDI1My05Y2MxLWNhNzVhMWZhYTE4ZSIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient does not exist in registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"test-123\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"3820fb3a-6fd5-4253-9cc1-ca75a1faa18e\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"53c481a8-9090-4d62-a126-481e06be15bb\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:43.902+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198804375,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198804375,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"8c8cd276-fc11-4e89-947e-dd166bd6d592\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImYwNzg2ZTc1LWRjNzAtNDQyMi04NjI3LTdhZTRlODEwZGE4MiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDQuMTQ3KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImEyZmY2NDY2LTZlMWItNDJmMy1hYWJiLTA0N2MyYjJmOTYxYyIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_ACCESS_DENIED\",\n            \"message\": \"Caller id and sender code is not matched\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"a2ff6466-6e1b-42f3-aabb-047c2b2f961c\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"f0786e75-dc70-4422-8627-7ae4e810da82\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:44.147+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198804820,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198804820,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"225ca8a0-6b37-4ce3-843e-65f294116c96\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTUiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjFlZGQ2ZjZiLTYwNWYtNDg3MC1hMDVhLTdmZmMzYTk2MGI1NCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTY6NDQuNTk2KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6Ijg4ZGQ3YTQxLWJjNWYtNDk2OS1hYjIzLWVkZWMzNmE1MmEwMiIsIngtaGN4LXdvcmtmbG93X2lkIjoiNWU5MzRmOTAtMTExZC00ZjBiLWIwMTYtYzIyZDgyMDY3NGUyIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_INVALID_RECIPIENT\",\n            \"message\": \"recipient  is blocked or inactive as per the registry\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-5\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"88dd7a41-bc5f-4969-ab23-edec36a52a02\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"1edd6f6b-605f-4870-a05a-7ffc3a960b54\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:56:44.596+0530\",\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198803706,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198803706,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"aa2967f5-0730-4c97-b562-cb265fd047c6\",\n        \"senderRole\": [],\n        \"recipientRole\": [],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImQwMzQ2ZjM0LWNmMDQtNGI4Yi05NzAxLTNmYTEyOGQ3NGFmZSIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYmZjNWEzMWItZmI4MS00YmNjLWE2ZmMtNjViY2YxZTRlODNlIiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIifQ==.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {\n            \"code\": \"ERR_MANDATORY_HEADERFIELD_MISSING\",\n            \"message\": \"Mandatory headers are missing: [x-hcx-timestamp]\",\n            \"trace\": null\n        },\n        \"x-hcx-debug_details\": null,\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"bfc5a31b-fb81-4bcc-a6fc-65bcf1e4e83e\",\n        \"x-hcx-workflow_id\": \"5e934f90-111d-4f0b-b016-c22d820674e2\",\n        \"x-hcx-correlation_id\": \"d0346f34-cf04-4b8b-9701-3fa128d74afe\",\n        \"x-hcx-timestamp\": null,\n        \"x-hcx-status\": \"response.error\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198748398,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198751773,\n        \"action\": \"/v1/paymentnotice/on_request\",\n        \"mid\": \"06987a7f-4bc5-4ac8-af46-311956c29c9f\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImNlMjllMzBkLTc3MDUtNGE0NC1iN2Y1LTUwNWIyMDViZGZlMiIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTU6NDAuODgwKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6Ijg4ZDJiYjBmLWNiYzUtNGMyMi1hZDhhLWQ1YjYxMTQzZDRiNiIsIngtaGN4LXN0YXR1cyI6InJlc3BvbnNlLmNvbXBsZXRlIn0=.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"88d2bb0f-cbc5-4c22-ad8a-d5b61143d4b6\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"ce29e30d-7705-4a44-b7f5-505b205bdfe2\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:55:40.880+0530\",\n        \"x-hcx-status\": \"response.complete\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198832352,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198839632,\n        \"action\": \"/v1/preauth/submit\",\n        \"mid\": \"a2820f8f-2500-486d-bc2d-eb47c6f8d300\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6ImVjYjhlMDRiLTc4ZDgtNDM0Zi1hMTU1LWQ0MjJhYzlhYjAyYyIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTc6MTEuNzMyKzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjQxNzQyZDdlLTdmMDItNDZhZC05MjllLThiNzE3YmMxYzdkZCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"41742d7e-7f02-46ad-929e-8b717bc1c7dd\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"ecb8e04b-78d8-434f-a155-d422ac9ab02c\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:57:11.732+0530\",\n        \"x-hcx-status\": \"request.dispatched\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198824380,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198831644,\n        \"action\": \"/v1/predetermination/submit\",\n        \"mid\": \"f454b3ff-1883-41e7-b94a-f9605059cb52\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjRmYTUwNjE5LWI0MGMtNDlhNS1iOWRhLTYwNGIyNjE0MjUzMCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTc6MDQuMTQ5KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6IjQ0YmRkZjFiLTIzODYtNDM5OS1iNmNiLTY0NTI3NGYzNDBhNiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"44bddf1b-2386-4399-b6cb-645274f340a6\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"4fa50619-b40c-49a5-b9da-604b26142530\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:57:04.149+0530\",\n        \"x-hcx-status\": \"request.dispatched\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    },\n    {\n        \"eid\": \"AUDIT\",\n        \"requestTimeStamp\": 1655198812542,\n        \"auditTimeStamp\": 0,\n        \"updatedTimestamp\": 1655198827948,\n        \"action\": \"/v1/coverageeligibility/check\",\n        \"mid\": \"49cf76c4-8939-4fe4-8b14-d7f8685099e9\",\n        \"senderRole\": [\n            \"provider\"\n        ],\n        \"recipientRole\": [\n            \"payor\"\n        ],\n        \"payload\": \"eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InByb3ZpZGVyLXRlc3QtdXNlciIsIngtaGN4LXJlY2lwaWVudF9jb2RlIjoicGF5b3ItdGVzdC11c2VyLTMiLCJ4LWhjeC1jb3JyZWxhdGlvbl9pZCI6IjdjM2U0MmM4LTEyNmQtNGI0Yy1hMDAyLWFkODI0MGFlMTE0ZCIsIngtaGN4LXRpbWVzdGFtcCI6IjIwMjItMDYtMTRUMTQ6NTM6MzAuOTI5KzA1MzAiLCJ4LWhjeC1hcGlfY2FsbF9pZCI6ImIzNjg1ZTRkLTM4OTUtNDAyNy1iYTUwLTRkZTYxMDJlOGU5YiJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw\",\n        \"notificationDispatchResult\": null,\n        \"x-hcx-error_details\": {},\n        \"x-hcx-debug_details\": {},\n        \"x-hcx-recipient_code\": \"payor-test-user-3\",\n        \"x-hcx-sender_code\": \"provider-test-user\",\n        \"x-hcx-api_call_id\": \"b3685e4d-3895-4027-ba50-4de6102e8e9b\",\n        \"x-hcx-workflow_id\": \"\",\n        \"x-hcx-correlation_id\": \"7c3e42c8-126d-4b4c-a002-ad8240ae114d\",\n        \"x-hcx-timestamp\": \"2022-06-14T14:53:30.929+0530\",\n        \"x-hcx-status\": \"request.queued\",\n        \"x-hcx-notification_id\": null,\n        \"x-hcx-notification_data\": null\n    }\n]"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "host",
      "value": "http://localhost:8080"
    }
  ]
}